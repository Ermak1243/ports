// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ports "ports/internal/services/ports"

	mock "github.com/stretchr/testify/mock"
)

// Port is an autogenerated mock type for the Port type
type Port struct {
	mock.Mock
}

// GetInPort provides a mock function with given fields: number
func (_m *Port) GetInPort(number int) (ports.InPort, error) {
	ret := _m.Called(number)

	var r0 ports.InPort
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (ports.InPort, error)); ok {
		return rf(number)
	}
	if rf, ok := ret.Get(0).(func(int) ports.InPort); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.InPort)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutPort provides a mock function with given fields: number
func (_m *Port) GetOutPort(number int) (ports.OutPort, error) {
	ret := _m.Called(number)

	var r0 ports.OutPort
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (ports.OutPort, error)); ok {
		return rf(number)
	}
	if rf, ok := ret.Get(0).(func(int) ports.OutPort); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.OutPort)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPort interface {
	mock.TestingT
	Cleanup(func())
}

// NewPort creates a new instance of Port. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPort(t mockConstructorTestingTNewPort) *Port {
	mock := &Port{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
